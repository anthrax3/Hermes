

Hermes Targeted Fuzz Testing System: README

Version: 	1.0
Date:		January 29, 2014
Author:		Caleb Shortt

------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------

Contents:

  Configuration and Usage
  Parser
  Analyzer
  Coverage
  Fuzz Test Server
  Server Logs
  Genetic Algorithm
  Protocol Definition Creator
  Target Projects

------------------------------------------------------------------------------
==============================================================================
------------------------------------------------------------------------------


Configuration and Usage
------------------------------------------------------------------------------

Usage:

  Some scripts have been written to simplify the excution of Hermes:

  uni_findbugrun.sh 	[Unix: Executes FindBugs on the target]
  win_client.bat 		[Windows: Execute a single run of the client]
  win_evaluation.bat 	[Windows: Execute client infinitely]
  win_findbugrun.bat 	[Windows: Executes FindBugs on the target]
  win_server.bat 		[Windows: Execute the server (hermes.py)]

  ----------------------------------------------------------------------------

  > python hermes.py [options]

  OPTIONS:

    -r
      reset:  Reset the fuzz server on Hermes to completely start over.
              This will delete any generated protocol definitions.

    -f
      fuzz:   Activate the fuzz server and start the testing.
              This also activates the genetic algorithm to start 
              generating protocol definitions.

    -c
      cvg:    Activate the coverage listener server. This is used to 
              listen for coverage reports sent from the client-side 
              of Hermes (Coverage wrapper for EMMA).

    -b
      basic:  Initializes a basic Sulley fuzz server that is used to 
              evaluate the protocols generated by Hermes.
              Requires the -p argument.

    -p [path]
      prot:   (To be used with -b) specifies which protocol to use.

    -g
      generate:
              Generate a protocol definition given the individual (via the 
              -i argument) and the to-save file name (via the -n argument)

    -i [individual]
      individual:
              Specifies the individual as s comma-sepatated string. (To 
              be used with -g)

    -n [file name]
      name:   Specifies the filename to save the generated protocol 
              definition to. (To be used with -g)


  EXAMPLES:

    E1:  Start Hermes protocol generation:

        # Start the coverage listener and the genetic algorithm / generator
        > win_server.bat

        # Start the target program execution
        > win_evaluation.bat

    E2:  Test the generated protocol:

        1. Start Coverage Listener (helps to be a bg process):
        > python hermes.py -c

        2. Start Fuzz Server (helps to be a bg process):
        > python hermes.py -b -p ./PD_Creator/some_protocol.py

        3. Start Evaluation only once ([win/uni]_client runs a single evaluation):
        > win_client.bat

    E3:  Create a protocol given an individual

        # Will save the protocol in Generated_Protocols/test_prot.py
        > python hermes.py -g -i "1,0,1,0,1,0,1" -n "test_prot.py"


------------------------------------------------------------------------------

Configuration:
	
  Dependencies:

    Python 2.7 (With PATH set)            [Untested on Python 3.0+]
    Java 1.6.2+ (With PATH set)
    DEAP (Python genetic algorithm library)


  Set the target for Hermes in the win_findbugrun.bat and uni_findbugrun.sh 
  scripts. The win_client.bat and win_evaluation.bat (and linux equivalents)
  will also have to be modified to exeute the target application.



==============================================================================



Parser
------------------------------------------------------------------------------

The parser takes the results from FindBugs (*_findbugrun.[sh|bat], which 
produces an xml file) and converts the information into an intermediate 
list format with only the information desired (general filtering).

USAGE:

> python parser.py [options]

OPTIONS:

  -d [--defectdensityfile]
    [REQUIRED OPTION]
    Path to the defect density file created by the init script

  -b [--bugfile]
    [REQUIRED OPTION]
    Path the the generated xml bug file from findbugs via init script


NOTES:

The parse log is stored in the 'parse_log.txt' file by default.
The parser generates 2 files: a results file, and a defect density file which 
are both used by the analyzer.



==============================================================================



Analyzer
------------------------------------------------------------------------------

The ananlyzer takes the results from the parser and calculates the severities 
and classes of bugs found. From this information, the analyzer sorts the bugs 
order of severity and selects the top x percent of them to target. This list 
of targets is saved for use in the coverage tools and, ultimately, in the 
genetic algorithm.

USAGE:

> python analyzer.py [options]

OPTIONS:

  -r [--parseresultsfile]
    [REQUIRED OPTION]
    Path to the parser results file generated by the parser program


NOTES:

The analyser generates a single file called 'targets' which is a pickeled list 
of the targets selected (and their associated information) as FB_Bug objects.



==============================================================================



Coverage
------------------------------------------------------------------------------

The coverage module contains the EMMA code coverage tool and a coverage 
wrapper that takes the results generated by EMMA and sends them (via network) 
to the coverage listener on the server side. As such, this module is executed 
on the client side as EMMA must monitor the execution of the target software.

USAGE:

> python CoverageWrapper.py [options]

OPTIONS:

  -f [--emmaoutputfile]
    [REQUIRED OPTION]
    Provides a path to the EMMA output file to be sent


NOTES:

The target address of the coverage wrapper is configurable in 
Config/coverage.py



==============================================================================



Fuzz Test Server
------------------------------------------------------------------------------

The fuzz test server module contains the Sulley fuzzing framework and the 
associated fuzz server library used by Hermes. The fuzz server listens for 
HTTP requests and provides a fuzzed response based on the protocol loaded.


NOTES:

The fuzz test server cannot be called directly (via cmd line) and is a class 
that must be initialized to be used or extended.

The server is configurable in Config/fuzzserver.py
The default location for the fuzz server logs is ServerLogs/



==============================================================================



Genetic Algorithm
------------------------------------------------------------------------------

The genetic algorithm contains the driving functionality of Hermes. The 
module contains the coverage listener, the algorithm, the raw reports 
received, and the condensed logs those reports contain.


NOTES:

Both the coverage listener and the algorithm cannot be called directly (via 
cmd line) and mist be initialized or extended.

The coverage listener's config is located at Config/coverage.py



==============================================================================



Protocol Definition Creator
------------------------------------------------------------------------------

The protocol definition creator dynamically generates a sulley protocol 
definition based on the 'individual' given to it by the genetic algorithm. 

The default configuration constructs HTML.
The HTML protocol is defined in a tree structure where each node is an HTML 
tag. Each tag can contain attributes, other nodes, and the tag format. It 
also supports arbitraty nesting levels inherently. 

A protocol is generated by executing a prefix traversal of the tree and then 
closing the tags postfix. This does not generate HTML but the python code 
required to define a sulley protocol definition. It supports proper python 
indentation, syntax, and imports. Comments are included to provide versioning 
and tracking information.


NOTES:

To extend the protocol definition creator, add a funciton in 
Protocol_Definition_Creator.py



==============================================================================



Target Projects
------------------------------------------------------------------------------

This directory contains the target executables (jars) for Hermes.







==============================================================================


